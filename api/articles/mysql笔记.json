{"title":"Mysql笔记","uid":"01997d5dc8999c6dc19f4a1759fa3505","slug":"mysql笔记","date":"2020-07-06T08:40:36.000Z","updated":"2021-11-30T09:04:54.682Z","comments":true,"path":"api/articles/mysql笔记.json","keywords":"node.js blogs IT 互联网 服务端 游戏 mysql redis","cover":[],"content":"<p>第1章 SQL基础<br>1.数据分为DDL(数据定义语言)，DML(数据操纵语言)，DCL(数据控制语言)<br>    1.1 DDL语句<br>    <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mysql -uroot -p\ncreate database test1;\nuse test1;\nshow tables;   \t\t\t\t\t\t\t\t#查看所有表\ndrop database test1;\ncreate table emp(ename varchar(10),hiredate date,sal decimal(2,10),deptno int(2));\ndesc emp;\t\t\t\t\t\t\t\t\t#查看表信息\nshow create table emp \\G;\t\t\t\t\t#\\G使得记录能够按照字段竖向排列 以便显示更长内容\ndrop table emp;\nalter table emp modify ename varchar(20);\t#修改表字段\nalter table emp add column age int(3);\t\t#添加字段\nalter table emp drop colum age\t\t\t\t#删除字段\nalter table emp change age age123 int(4);\t#字段改名同时修改类型\nalter table emp add birth date after ename;\t#修改字段排列顺序\nalter table emp rename emp1;</code></pre></p>\n<span id=\"more\"></span>\n<pre><code>1.2 DML语句 增删改查\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">insert into emp (ename,sal) values(&#39;dony&#39;,1000);\ndelete from emp where ename &#x3D; &#39;xxx&#39;;\nselect distinct age from emp1;\t\t\t\t\t\t\t\t\t\t\t\t#查询的内容去重\nselect * from emp order by age,deptno desc;\t\t\t\t\t\t\t\t\t#根据某个字段排序\n\tselect age,count(1) from emp group by age with rollup;\t\t\t\t\t\t#分类统计计数及总数\n\tselect age,count(1) from emp group by age having count(1)&gt;1;\n\tselect ename,deptname from emp,dept where emp.age &#x3D; dept.age;\t\t\t\t#联查,内链接\n\tselect ename,deptname from emp left jion dept on emp.deptno &#x3D; dept.deptno;\t#表链接很多情况下优于子查询\n\tselect * from dept union all select * from emp;\t\t\t\t\t\t\t\t#集合显示不去重\n\tselect * from dept union select * from emp;\t\t\t\t\t\t\t\t\t#集合显示去重</code></pre>\nYou can&#39;t specify target table &#39; for update in FROM clause\nMysql不让对查询到的目标语句进行更新\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">DELETE FROM playeritems WHERE id IN(SELECT mid FROM (SELECT min(id) as mid FROM playeritems WHERE uid &#x3D; &#39;1300200112870961&#39; GROUP BY iname HAVING count(iname) &gt; 1 )as tmp);</code></pre>\n\n1.3 DCL语句\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">grant select,insert on sakila.* to &#39;z1@localhost&#39; identified by &#39;123&#39;; \t\t#赋予用户权限\nrevoke insert on sakila.* from &#39;z1@localhost&#39;;\t\t\t\t\t\t\t\t#回收权限</code></pre></code></pre><p>2.常用函数<br>    <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">select NOW();\t\t\t\t\t\t\t\t\t#xxxx-xx-xx xx:xx:xx\nselect UNIX_TIMESTAMP(now());\t\t\t\t\t#时间戳\nselect FROM_UNIXTIME(时间戳);\t\t\t\t\t#xxxx-xx-xx xx:xx:xx\nIF(value,t,f)\t\t\t\t\t\t\t\t\t#如果value为真，返回t,否则返回f\nselect if(a &gt; 2000, &#39;high&#39;,&#39;low&#39;) from B\nIFNULL(value1,value2)\t\t\t\t\t\t\t#如果value1不为空，返回value1,否则返回value2\nselect ifnull(a , 0) from B\nCASE WHEN value THEN res1 ... ELSE def END\t\t#如果value1真，返回res1,否则返回def\nselect case when a&lt;2000 then &#39;low&#39; else &#39;high&#39; end from B\nCASE exp WHEN value THEN res1 ... ELSE def END\t#如果exp &#x3D; value1真，返回res1,否则返回def\nselect case a when 1000 then &#39;low&#39; when 2000 then &#39;mid&#39; else &#39;high&#39; end from B</code></pre></p>\n<p>第2章 存储引擎<br>1.mysql的存储引擎有好多种，这边记录2种<br>    1.1 MyISAM 不支持事务、不支持外键、速度快、表锁<br>    1.2 InnoDB 支持提交、回滚、奔溃恢复能力的事务安全，行锁</p>\n<p>2.myssql事务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">start transaction;\nsql 操作\ncommit and chain;</code></pre>\n\n<p>3.防止sql注入</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$re &#x3D; &quot;&#x2F;(|\\&#39;|(\\%27)|\\;|(\\%3b)|\\&#x3D;|(\\%3d)|\\(|(\\%28)|\\)|(\\%29)|(\\&#x2F;*) |(\\%2f%2a)|(\\ *&#x2F;)|(\\%2a%2f)|\\+|(\\%2b)|\\&lt;|(\\%3c)|\\&gt;|(\\%3e)|\\(--))|\\[|\\%5b|\\]|\\%5d)&#x2F;&quot;;\n\nif(preg_match($re, $aa) &gt;0)&#123;\n\techo(&quot;参数不对&quot;);\n\treturn 0;\n&#125;</code></pre>\n\n<p>4.SQL MODE<br>ANSI 使语法行为更符合sql<br>STRICT_TRANS_TABLES 试用于事务，严格模式，报错不警告,不允许非法日期<br>TRADITIONAL 严格模式，适用于事务非事务，不警告直接报错</p>\n<p>5.sql分区<br>RANGE分区：基于一个给定连续区间范围，把数据分配到不同分区<br>LIST分区：类似RANGE<br>HASH分区：基于给定的分区个数，把数据分配到不同分区<br>KEY分区：类似于HASH分区<br>RANGE\\LIST\\HASH分区键必须INT型</p>\n<p>好处4点<br>存储更多数据、优化查询、快速删除数据、获得更大查询吞吐量<br>Range分区利用取值范围将数据分成分区</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">CREATE TABLE emp(\nid INT NOT NULL,\nNAME VARCHAR(20),\nage INT\n)\nPARTITION BY RANGE(ID)(\nPARTITION p0 VALUES LESS THAN (6),\nPARTITION p1 VALUES LESS THAN (11),\nPARTITION pmax VALUES LESS THAN maxvalue\n);</code></pre>\n<p>LIST分区是建立离散的之列表告诉数据库特定值在哪个分区</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">CREATE TABLE expense(\nexpense_date DATE NOT NULL,\ncategory INT,\namount DECIMAL (10,3)\n)\nPARTITION BY LIST(category)(\nPARTITION p0 VALUES IN(3,5),#可字符串在5.5版本后\nPARTITION p1 VALUES IN(1,10),\nPARTITION p2 VALUES IN(4,9),\nPARTITION p3 VALUES IN(2),\nPARTITION p4 VALUES IN(6)\n);</code></pre>\n<p>Columns分区可分为 RANGE Columns和LIST Columns分区都支持int\\date\\string,还支持多列</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">CREATE TABLE expense(\na INT,\nb INT\n)\nPARTITION BY RANGE COLUMS(a,b)(\nPARTITION p0 VALUES IN(0,10),#可字符串在5.5版本后\nPARTITION p1 VALUES IN(10,10),\nPARTITION p2 VALUES IN(10,29)\n);</code></pre>\n<p>HASH分区用来分散热点读，确保数据在预留分区平均分布，有常规分区和线性分区</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#常规 平衡不方便\nCREATE TABLE emp(\nid INT NOT NULL,\nNAME VARCHAR(20),\nage INT\n)\nPARTITION BY HASH(ID) PARTITIONS 4;\n#线性 快速不平衡\nCREATE TABLE emp(\nid INT NOT NULL,\nNAME VARCHAR(20),\nage INT\n)\nPARTITION BY LINEAR HASH(ID) PARTITIONS 4;</code></pre>\n<p>key分区<br>类似HASH分区，数据类型除TEXThe BLOB以外都可以</p>\n<p>RANGE&amp;LIST 分区管理 分区被删除了分区中的数据也被删除了</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">alter table xxx drop partition p2; #删\nalter table xxx add partition (partiton p5 values less than (2025)) #增  不能添加一个包含现有分区值列表中的任意值分区\nalter table xxx reorganize partition p3 into (\n\tpartition p2 values less than (2005),\n\tpartition p3 values less than (2015)\n);\t\t\t#拆分\nalter table xxx reorganize partition p1,p2,p3 into (\n\tpartition p1 values less than (2015)\n);\t\t#合并</code></pre>\n\n<p>HASH&amp;KEY 分区管理</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">alter table xxx coalesce partition 2; #原4删2\nalter table xxx coalesce partition 8; #原4加8</code></pre>\n\n<p>6.SQL优化</p>\n<ol>\n<li>通过慢查询日志定位效率低的sql,在查询过程中出现的情况可以用show processlist命令查看mysql进程，看锁表及进程状态</li>\n<li>将慢的sql提取做explain分析，type的性能如下<br> ALL,全表扫瞄<br> index,索引全扫描<br> range,索引范围扫描 常见&lt;&lt;=&gt;&gt;=\\between<br> ref,使用非唯一索引扫描或者唯一索引前缀扫描（联合索引）<br> eq_ref,使用唯一索引<br> const/system,单表中最多有一个匹配行<br> NULL，不查表直接得到结果<br> 自上而下效率越来越高</li>\n<li>通过show profile分析sql<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">select @@have_profiling;\t#查询是否支持\nselect @@profiling;\t\t#查询是否开启\nset profiling&#x3D;1;\t\t#开启\nshow profiles;\t\t\t#显示sql的执行排列\nshow profile for query 4;\t#查找具体某一条的状态\nshow profile cpu for query 4;\t#查询莫一条在具体（all\\cpu\\block io\\context\\switch\\page faults）</code></pre>\n\n</li>\n</ol>\n<p>mac或者linux当mysql连接不上的时候加<br>ALTER USER ‘root’@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘password’;</p>\n<p>7.mysql配置优化<br>在mysqld下</p>\n<p><label style=\"color:red\">为所有线程打开的表的数量。增加这个值会增加mysqld需要的文件描述符的数量。因此，您必须确保在[mysqld_safe]节中的变量“open-files-limit”中将允许打开的文件数量至少设置为4096</label><br>table_open_cache=2000</p>\n<p><label style=\"color:red\">内部(内存)临时表的最大大小。如果一个表比这个值大，那么它将自动转换为基于磁盘的表。可以有很多。</label><br>tmp_table_size=94M</p>\n<p><label style=\"color:red\">我们应该在缓存中保留多少线程以供重用。当客户机断开连接时，如果之前的线程数不超过thread_cache_size，则将客户机的线程放入缓存。如果您有很多新连接，这将大大减少所需的线程创建量(通常，如果您有一个良好的线程实现，这不会带来显著的性能改进)。</label><br>thread_cache_size=10</p>\n<p><label style=\"color:red\">如果用于快速创建索引的临时文件比这里指定的使用键缓存的文件大，则首选键缓存方法。这主要用于强制大型表中的长字符键使用较慢的键缓存方法来创建索引。</label><br>key_buffer_size=8M</p>\n<p><label style=\"color:red\">用于对MyISAM表执行全表扫描的缓冲区的大小。如果需要完整的扫描，则为每个线程分配。</label><br>read_buffer_size=16M<br>read_rnd_buffer_size=32M</p>\n<p><label style=\"color:red\">如果在SHOW GLOBAL STATUS输出中每秒看到许多sort_merge_passes，可以考虑增加sort_buffer_size值，以加快ORDER BY或GROUP BY操作的速度，这些操作无法通过查询优化或改进索引来改进。</label><br>sort_buffer_size=16M</p>\n<p><label style=\"color:red\">InnoDB用于缓冲日志数据的缓冲区大小。一旦它满了，InnoDB就必须将它刷新到磁盘。由于它无论如何每秒刷新一次，所以将它设置为非常大的值是没有意义的(即使是长事务)。</label><br>innodb_log_buffer_size=5M</p>\n<p><label style=\"color:red\">与MyISAM不同，InnoDB使用缓冲池来缓存索引和行数据。设置的值越大，访问表中的数据所需的磁盘I/O就越少。在专用数据库服务器上，可以将该参数设置为机器物理内存大小的80%。但是，不要将它设置得太大，因为物理内存的竞争可能会导致操作系统中的分页。注意，在32位系统上，每个进程的用户级内存可能被限制在2-3.5G，所以不要设置得太高。</label><br>innodb_buffer_pool_size=20M</p>\n<p><label style=\"color:red\">ORDER BY 或者GROUP BY 操作的buffer缓存大小</label><br>innodb_sort_buffer_size = 64M</p>\n<p><label style=\"color:red\">为了提升扩展性和刷脏效率，在5.7.4版本里引入了多个page cleaner线程。从而达到并行刷脏的效果<br>在该版本中，Page cleaner并未和buffer pool绑定，其模型为一个协调线程 + 多个工作线程，协调线程本身也是工作线程。因此如果innodb_page_cleaners设置为8，那么就是一个协调线程，加7个工作线程</label><br>innodb_page_cleaners = 4</p>\n<p><label style=\"color:red\">mysql客户端连接数据库是交互式连接，通过jdbc连接数据库是非交互式连接</label><br>interactive_timeout = 100 # 交互式连接超时<br>wait_timeout = 100 # 非交互连接超时</p>\n<p>8.mysql索引背后的数据结构及算法</p>\n<h1 id=\"B-Tree\"><a href=\"#B-Tree\" class=\"headerlink\" title=\"B-Tree\"></a>B-Tree</h1><p>为了描述B-Tree，首先定义一条数据记录为一个二元组[key, data]，key为记录的键值，对于不同数据记录，key是互不相同的；data为数据记录除key外的数据。那么B-Tree是满足下列条件的数据结构：<br>d为大于1的一个正整数，称为B-Tree的度。<br>h为一个正整数，称为B-Tree的高度。<br>每个非叶子节点由n-1个key和n个指针组成，其中d&lt;=n&lt;=2d。<br>每个叶子节点最少包含一个key和两个指针，最多包含2d-1个key和2d个指针，叶节点的指针均为null 。<br>所有叶节点具有相同的深度，等于树高h。<br>key和指针互相间隔，节点两端是指针。<br>一个节点中的key从左到右非递减排列。<br>所有节点组成树结构。<br>每个指针要么为null，要么指向另外一个节点。<br>如果某个指针在节点node最左边且不为null，则其指向节点的所有key小于(v(key_1))，其中(v(key_1))为node的第一个key的值。<br>如果某个指针在节点node最右边且不为null，则其指向节点的所有key大于(v(key_m))，其中(v(key_m))为node的最后一个key的值。<br>如果某个指针在节点node的左右相邻key分别是(key_i)和(key_{i+1})且不为null，则其指向节点的所有key小于(v(key_{i+1}))且大于(v(key_i))。<br>图2是一个d=2的B-Tree示意图。<br><img src=\"/post/1594024645933.jpg\" alt=\"图2\"></p>\n<p>由于B-Tree的特性，在B-Tree中按key检索数据的算法非常直观：首先从根节点进行二分查找，如果找到则返回对应节点的data，否则对相应区间的指针指向的节点递归进行查找，直到找到节点或找到null指针，前者查找成功，后者查找失败。B-Tree上查找算法的伪代码如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">BTree_Search(node, key) &#123;\n    if(node &#x3D;&#x3D; null) return null;\n    foreach(node.key)\n    &#123;\n        if(node.key[i] &#x3D;&#x3D; key) return node.data[i];\n            if(node.key[i] &gt; key) return BTree_Search(point[i]-&gt;node);\n    &#125;\n    return BTree_Search(point[i+1]-&gt;node);\n&#125;</code></pre>\n<p>data = BTree_Search(root, my_key);<br>关于B-Tree有一系列有趣的性质，例如一个度为d的B-Tree，设其索引N个key，则其树高h的上限为(log_d((N+1)/2))，检索一个key，其查找节点个数的渐进复杂度为(O(log_dN))。从这点可以看出，B-Tree是一个非常有效率的索引数据结构。</p>\n<h1 id=\"B-Tree-1\"><a href=\"#B-Tree-1\" class=\"headerlink\" title=\"B+Tree\"></a>B+Tree</h1><p>MySQL就普遍使用B+Tree实现其索引结构<br>与B-Tree相比，B+Tree有以下不同点：<br>每个节点的指针上限为2d而不是2d+1。<br>内节点不存储data，只存储key；叶子节点不存储指针。<br>图3是一个简单的B+Tree示意。<br><img src=\"/post/1594091073360.jpg\" alt=\"图3\"></p>\n<p>一般在数据库系统或文件系统中使用的B+Tree结构都在经典B+Tree的基础上进行了优化，增加了顺序访问指针</p>\n<h1 id=\"MyISAM索引\"><a href=\"#MyISAM索引\" class=\"headerlink\" title=\"MyISAM索引\"></a>MyISAM索引</h1><p>使用的是B+Tree作为索引结构，叶节点的data域存放的是数据记录的地址<br><img src=\"/post/1594103060655.jpg\" alt=\"图4\"></p>\n<h1 id=\"InnoDB索引\"><a href=\"#InnoDB索引\" class=\"headerlink\" title=\"InnoDB索引\"></a>InnoDB索引</h1><p>InnoDB也使用B+Tree作为索引结构<br>第一重大区别是InnoDB的数据文件本身就是索引文件，InnoDB表数据文件本身就是主索引<br><img src=\"/post/1594103257328.jpg\" alt=\"图5\"><br>因为InnoDB的数据文件本身要按主键聚集，所以InnoDB要求表必须有主键（MyISAM可以没有）如果没有显式指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形<br>第二个与MyISAM索引的不同是InnoDB的辅助索引data域存储相应记录主键的值而不是地址<br><img src=\"/post/1594103590868.jpg\" alt=\"图6\"><br>聚集索引这种实现方式使得按主键的搜索十分高效，但是辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录<br><label style=\"color:red\">因为InnoDB数据文件本身是一颗B+Tree，非单调的主键会造成在插入新记录时数据文件为了维持B+Tree的特性而频繁的分裂调整，十分低效，而使用自增字段作为主键则是一个很好的选择</label></p>\n<h1 id=\"InnoDB的主键选择与插入优化\"><a href=\"#InnoDB的主键选择与插入优化\" class=\"headerlink\" title=\"InnoDB的主键选择与插入优化\"></a>InnoDB的主键选择与插入优化</h1><p>在使用InnoDB存储引擎时，如果没有特别的需要，请永远使用一个与业务无关的自增字段作为主键 （百万条以下的数据看不出来多大区别）</p>\n<p>1、B+树的层级更少。</p>\n<p>相较于B树B+每个非叶子节点存储的关键字数更多，树的层级更少所以查询数据更快；</p>\n<p>2、B+树查询速度更稳定。</p>\n<p>B+所有关键字数据地址都存在叶子节点上，所以每次查找的次数都相同所以查询速度要比B树更稳定;</p>\n<p>3、B+树天然具备排序功能。</p>\n<p>B+树所有的叶子节点数据构成了一个有序链表，在查询大小区间的数据时候更方便，数据紧密性很高，缓存的命中率也会比B树高。</p>\n<p>4、B+树全节点遍历更快。</p>\n<p>B+树遍历整棵树只需要遍历所有的叶子节点即可，而不需要像B树一样需要对每一层进行遍历，这有利于数据库做全表扫描。</p>\n<p>9.mysql 调优过程中的常用命令<br>ps -es|grep mysql</p>\n<h1 id=\"当启动不了或者报错的时候，mysql-Password字段是authentication-string-配置太多会报错启动用\"><a href=\"#当启动不了或者报错的时候，mysql-Password字段是authentication-string-配置太多会报错启动用\" class=\"headerlink\" title=\"当启动不了或者报错的时候，mysql Password字段是authentication_string,配置太多会报错启动用\"></a>当启动不了或者报错的时候，mysql Password字段是authentication_string,配置太多会报错启动用</h1><p>/usr/local/mysql/bin/mysqld –user=mysql </p>\n<h1 id=\"刷新数据库-进mysql后\"><a href=\"#刷新数据库-进mysql后\" class=\"headerlink\" title=\"刷新数据库 进mysql后\"></a>刷新数据库 进mysql后</h1><h1 id=\"Access-denied-for-user-‘root-localhost’报错\"><a href=\"#Access-denied-for-user-‘root-localhost’报错\" class=\"headerlink\" title=\"Access denied for user ‘root@localhost’报错\"></a>Access denied for user ‘root@localhost’报错</h1><p>update mysql.user set authentication_string=’123’ where user=’root’;</p>\n<h1 id=\"macs上的环境变量open-bash-profile中加入如下然后保存-source-bash-profile\"><a href=\"#macs上的环境变量open-bash-profile中加入如下然后保存-source-bash-profile\" class=\"headerlink\" title=\"macs上的环境变量open ~/.bash_profile中加入如下然后保存   source ~/.bash_profile\"></a>macs上的环境变量open ~/.bash_profile中加入如下然后保存   source ~/.bash_profile</h1><p>#windos下 安装要装一个vcredistx64<br>mysqld –skip-grant-tables 进入后修改密码</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#mysql\nexport MYSQL&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin\nexport PATH&#x3D;$MYSQL:$PYTHON3:$PATH:</code></pre>\n<h1 id=\"查看MySQL服务器配置信息\"><a href=\"#查看MySQL服务器配置信息\" class=\"headerlink\" title=\"查看MySQL服务器配置信息\"></a>查看MySQL服务器配置信息</h1><p>mysql&gt; show variables;</p>\n<h1 id=\"查看MySQL服务器运行的各种状态值\"><a href=\"#查看MySQL服务器运行的各种状态值\" class=\"headerlink\" title=\"查看MySQL服务器运行的各种状态值\"></a>查看MySQL服务器运行的各种状态值</h1><p>mysql&gt; show global status;</p>\n<h1 id=\"mysql一定要定期清理日志，不然会出莫名其妙的问题，什么有的库打开就断开连接这样的\"><a href=\"#mysql一定要定期清理日志，不然会出莫名其妙的问题，什么有的库打开就断开连接这样的\" class=\"headerlink\" title=\"mysql一定要定期清理日志，不然会出莫名其妙的问题，什么有的库打开就断开连接这样的\"></a>mysql一定要定期清理日志，不然会出莫名其妙的问题，什么有的库打开就断开连接这样的</h1><p>ERROR 1030 (HY000) at line 33: Got error 168 from storage engine<br>mysql&gt; reset master;#清除日志</p>\n<h1 id=\"连接数查看\"><a href=\"#连接数查看\" class=\"headerlink\" title=\"连接数查看\"></a>连接数查看</h1><p>show status like ‘Threads%’;<br>SHOW VARIABLES LIKE ‘%max_connections%’;<br>set global max_connections = 1000;<br>flush privileges;</p>\n<p>#!/bin/bash<br>export pid=<code>ps -ef | grep mysql | head -n 1 | awk &#39;&#123;print $2&#125;&#39;</code> 取mysql的pid<br>echo password | sudo kill -9 $pid<br>mysql -uroot -pxx -e “set global max_connections = 1000;reset master;…”<br>sh -x xxx.sh 看问题</p>\n","text":"第1章 SQL基础1.数据分为DDL(数据定义语言)，DML(数据操纵语言)，DCL(数据控制语言) 1.1 DDL语句 mysql -uroot -p create database test1; use test1; show tables; #查看所有表 drop data...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"IT笔记","slug":"IT笔记","count":21,"path":"api/categories/IT笔记.json"}],"tags":[{"name":"mysql","slug":"mysql","count":3,"path":"api/tags/mysql.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#B-Tree\"><span class=\"toc-text\">B-Tree</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#B-Tree-1\"><span class=\"toc-text\">B+Tree</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#MyISAM%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">MyISAM索引</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#InnoDB%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">InnoDB索引</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#InnoDB%E7%9A%84%E4%B8%BB%E9%94%AE%E9%80%89%E6%8B%A9%E4%B8%8E%E6%8F%92%E5%85%A5%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">InnoDB的主键选择与插入优化</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BD%93%E5%90%AF%E5%8A%A8%E4%B8%8D%E4%BA%86%E6%88%96%E8%80%85%E6%8A%A5%E9%94%99%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8Cmysql-Password%E5%AD%97%E6%AE%B5%E6%98%AFauthentication-string-%E9%85%8D%E7%BD%AE%E5%A4%AA%E5%A4%9A%E4%BC%9A%E6%8A%A5%E9%94%99%E5%90%AF%E5%8A%A8%E7%94%A8\"><span class=\"toc-text\">当启动不了或者报错的时候，mysql Password字段是authentication_string,配置太多会报错启动用</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%B7%E6%96%B0%E6%95%B0%E6%8D%AE%E5%BA%93-%E8%BF%9Bmysql%E5%90%8E\"><span class=\"toc-text\">刷新数据库 进mysql后</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Access-denied-for-user-%E2%80%98root-localhost%E2%80%99%E6%8A%A5%E9%94%99\"><span class=\"toc-text\">Access denied for user ‘root@localhost’报错</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#macs%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8Fopen-bash-profile%E4%B8%AD%E5%8A%A0%E5%85%A5%E5%A6%82%E4%B8%8B%E7%84%B6%E5%90%8E%E4%BF%9D%E5%AD%98-source-bash-profile\"><span class=\"toc-text\">macs上的环境变量open ~&#x2F;.bash_profile中加入如下然后保存   source ~&#x2F;.bash_profile</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8BMySQL%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">查看MySQL服务器配置信息</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8BMySQL%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E5%90%84%E7%A7%8D%E7%8A%B6%E6%80%81%E5%80%BC\"><span class=\"toc-text\">查看MySQL服务器运行的各种状态值</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#mysql%E4%B8%80%E5%AE%9A%E8%A6%81%E5%AE%9A%E6%9C%9F%E6%B8%85%E7%90%86%E6%97%A5%E5%BF%97%EF%BC%8C%E4%B8%8D%E7%84%B6%E4%BC%9A%E5%87%BA%E8%8E%AB%E5%90%8D%E5%85%B6%E5%A6%99%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BB%80%E4%B9%88%E6%9C%89%E7%9A%84%E5%BA%93%E6%89%93%E5%BC%80%E5%B0%B1%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E8%BF%99%E6%A0%B7%E7%9A%84\"><span class=\"toc-text\">mysql一定要定期清理日志，不然会出莫名其妙的问题，什么有的库打开就断开连接这样的</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%9F%A5%E7%9C%8B\"><span class=\"toc-text\">连接数查看</span></a></li></ol>","author":{"name":"Fly","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个在夏天会被芒果砸到的城市靠写代码为生的前职业电竞选手","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Python学习笔记","uid":"d0c8d2c20d89823379ca4a9355ecc003","slug":"python学习笔记","date":"2020-07-09T08:20:08.000Z","updated":"2021-11-30T09:05:42.641Z","comments":true,"path":"api/articles/python学习笔记.json","keywords":"node.js blogs IT 互联网 服务端 游戏 mysql redis","cover":null,"text":"1.遇到的问题SyntaxError: Non-ASCII character ‘\\xe4’#-- coding: utf-8 -- 或者 #coding=utf-8 mac上的环境变量open ~/.bash_profile中加入如下然后保存 source ~/.bash_pr...","link":"","photos":[],"count_time":{"symbolsCount":790,"symbolsTime":"1 mins."},"categories":[{"name":"IT笔记","slug":"IT笔记","count":21,"path":"api/categories/IT笔记.json"}],"tags":[{"name":"python","slug":"python","count":1,"path":"api/tags/python.json"}],"author":{"name":"Fly","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个在夏天会被芒果砸到的城市靠写代码为生的前职业电竞选手","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"游戏中写出的Bug及思考","uid":"892e834e7d38475802e25b3393e5a70c","slug":"游戏中写出的bug及思考","date":"2020-06-16T01:48:20.000Z","updated":"2021-11-30T09:01:06.424Z","comments":true,"path":"api/articles/游戏中写出的bug及思考.json","keywords":"node.js blogs IT 互联网 服务端 游戏 mysql redis","cover":null,"text":"1.如果存在小游戏版本，写出的功能要兼容旧版本及新版本，因为小游戏渠道如果拦截就版本会导致玩家无法更新到新版本无法游戏 2.node版本要用双数的正式版本，单数为测试版本，容易存在不可预知的问题，比如之前时区的双数上会出现无法识别的问题 3.进程间通信的逻辑一定要注意，进程间的内...","link":"","photos":[],"count_time":{"symbolsCount":345,"symbolsTime":"1 mins."},"categories":[{"name":"IT笔记","slug":"IT笔记","count":21,"path":"api/categories/IT笔记.json"}],"tags":[{"name":"游戏","slug":"游戏","count":8,"path":"api/tags/游戏.json"}],"author":{"name":"Fly","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个在夏天会被芒果砸到的城市靠写代码为生的前职业电竞选手","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}