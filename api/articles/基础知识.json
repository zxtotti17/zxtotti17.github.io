{"title":"基础知识","uid":"7f9eaea51aac5991b1ad0d8e6f097110","slug":"基础知识","date":"2020-05-22T06:42:58.000Z","updated":"2021-11-30T08:59:30.750Z","comments":true,"path":"api/articles/基础知识.json","keywords":"node.js blogs IT 互联网 服务端 游戏 mysql redis","cover":null,"content":"<p>异步：异步指进程不是一次性执行完毕，而是走走停停，以不可知的速度向前推进。</p>\n<p>基本功能</p>\n<ol>\n<li><p>进程管理<br>进程控制、进程同步、进程通信、死锁处理、处理机调度等。</p>\n</li>\n<li><p>内存管理<br>内存分配、地址映射、内存保护与共享、虚拟内存等。</p>\n</li>\n<li><p>文件管理<br>文件存储空间的管理、目录管理、文件读写管理和保护等。</p>\n</li>\n<li><p>设备管理<br>完成用户的 I/O 请求，方便用户使用各种设备，并提高设备的利用率。</p>\n</li>\n</ol>\n<p>主要包括缓冲管理、设备分配、设备处理、虛拟设备等。</p>\n<ol>\n<li>ps<br>查看某个时间点的进程信息。</li>\n</ol>\n<p>示例：查看自己的进程</p>\n<h1 id=\"ps-l\"><a href=\"#ps-l\" class=\"headerlink\" title=\"ps -l\"></a>ps -l</h1><p>示例：查看系统所有进程</p>\n<h1 id=\"ps-aux\"><a href=\"#ps-aux\" class=\"headerlink\" title=\"ps aux\"></a>ps aux</h1><p>示例：查看特定的进程</p>\n<h1 id=\"ps-aux-grep-threadx\"><a href=\"#ps-aux-grep-threadx\" class=\"headerlink\" title=\"ps aux | grep threadx\"></a>ps aux | grep threadx</h1><h1 id=\"ps-aux-grep-node-查看所有node进程\"><a href=\"#ps-aux-grep-node-查看所有node进程\" class=\"headerlink\" title=\"ps aux | grep node 查看所有node进程\"></a>ps aux | grep node 查看所有node进程</h1><ol start=\"2\">\n<li>pstree<br>查看进程树。</li>\n</ol>\n<p>示例：查看所有进程树</p>\n<h1 id=\"pstree-A\"><a href=\"#pstree-A\" class=\"headerlink\" title=\"pstree -A\"></a>pstree -A</h1><ol start=\"3\">\n<li>top<br>实时显示进程信息。</li>\n</ol>\n<p>示例：两秒钟刷新一次</p>\n<h1 id=\"top-d-2\"><a href=\"#top-d-2\" class=\"headerlink\" title=\"top -d 2\"></a>top -d 2</h1><ol start=\"4\">\n<li>netstat<br>查看占用端口的进程</li>\n</ol>\n<p>示例：查看特定端口的进程</p>\n<h1 id=\"netstat-anp-grep-port\"><a href=\"#netstat-anp-grep-port\" class=\"headerlink\" title=\"netstat -anp | grep port\"></a>netstat -anp | grep port</h1><h1 id=\"lsof-i-42031\"><a href=\"#lsof-i-42031\" class=\"headerlink\" title=\"lsof -i:42031\"></a>lsof -i:42031</h1><p>实时读取文件</p>\n<h1 id=\"tail-fn-100-xxx-log\"><a href=\"#tail-fn-100-xxx-log\" class=\"headerlink\" title=\"tail -fn 100 xxx.log\"></a>tail -fn 100 xxx.log</h1><ol start=\"5\">\n<li>kill<br>杀进程<h1 id=\"kill-9-29876\"><a href=\"#kill-9-29876\" class=\"headerlink\" title=\"kill 9 29876\"></a>kill 9 29876</h1></li>\n</ol>\n<span id=\"more\"></span>\n\n<p>#计算机网络<br>物理层、数据链路层、网络层、传输层、应用层<br>物理层：<br>单工通信：单向传输<br>半双工通信：双向交替传输<br>全双工通信：双向同时传输</p>\n<p>数据链路层：<br>模拟信号转换成数字信号，封装成帧等特点</p>\n<p>网络层：<br>IP协议</p>\n<p>传输层：<br>TCP/UDP协议</p>\n<p>应用层：<br>HTTP协议</p>\n<p>长连接与短连接的理解：<br>之所以网络上说HTTP分为长连接和短连接，其实本质上是说的TCP连接。TCP连接是一个双向dao的通道，它是可以保持一段时间不关闭的，因此TCP连接才有真正的长连接和短连接这一说。HTTP协议说到底是应用层的协议，而TCP才是真正的传输层协议，只有负责传输的这一层才需要建立连接。<br>因此“HTTP连接”这一概念压根就不应该出现，HTTP只是一个应用层的协议，根本就没有连接这一说法，就像FTP协议一样，我们从来不会说“FTP连接”吧。归根到底，其实说的连接都是只传输层的TCP连接。相反说HTTP请求和HTTP响应反而更加准确一些都是通过TCP连接这个数据通道来传输请求和响应的。<br>说到这里就彻底的改变了之前的错误认识，以后记住长连接，短连接都是指的传输层的TCP连接，而不是应用层的HTTP协议。HTTP的长连接和短连接本质上是TCP长连接和短连接。HTTP属于应用层协议，在传输层使用TCP协议，在网络层使用IP协议。IP协议主要解决网络路由和寻址问题，TCP协议主要解决如何在IP层之上可靠的传递数据包，使在网络上的另一端收到发端发出的所有包，并且顺序与发出顺序一致。TCP有可靠，面向连接的特点。<br>现在的疑问<br>既然说到了长连接，那么什么是长连接，短连接呢？HTTP1.1中又是如何实现长连接的呢？那么长短连接又分别有什么优缺点呢？正如我们学习一个新知识的时候，总是会问自己这三个问题一样：XXX是什么？XXX怎么用？XXX的好处？像我们一般的普通web应用，csdn写博客的平台，这种采用长连接有什么用呢？<br>1，如何理解HTTP协议是无状态的<br>HTTP协议是无状态的，指的是协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。也就是说，打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系。HTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议（无连接）。<br>2，什么是长连接、短连接？<br>在HTTP/1.0中，默认使用的是短连接。也就是说，浏览器和服务器每进行一次HTTP操作，就建立一次连接，但任务结束就中断连接。如果客户端浏览器访问的某个HTML或其他类型的 Web页中包含有其他的Web资源，如JavaScript文件、图像文件、CSS文件等；当浏览器每遇到这样一个Web资源，就会建立一个HTTP会话。但从 HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头有加入这行代码：<br>Connection:keep-alive 服务器和客户端都要设置<br>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的 TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接要客户端和服务端都支持长连接。HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。<br>3，TCP连接<br>当网络通信时采用TCP协议时，在真正的读写操作之前，server与client之间必须建立一个连接，当读写操作完成后，双方不再需要这个连接 时它们可以释放这个连接，连接的建立是需要三次握手的，而释放则需要4次握手，所以说每个连接的建立都是需要资源消耗和时间消耗的。<br>经典的三次握手示意图：<br>经典的四次分手关闭图：<br>4，TCP短连接<br>我们模拟一下TCP短连接的情况，client向server发起连接请求，server接到请求，然后双方建立连接。client向server<br>发送消息，server回应client，然后一次读写就完成了，这时候双方任何一个都可以发起close操作，不过一般都是client先发起<br>close操作。为什么呢，一般的server不会回复完client后立即关闭连接的，当然不排除有特殊的情况。从上面的描述看，<br>短连接一般只会在<br>client/server间传递一次读写操作。<br>短连接的操作步骤是：建立连接——数据传输——关闭连接…建立连接——数据传输——关闭连接<br>5，TCP长连接<br>接下来我们再模拟一下长连接的情况，client向server发起连接，server接受client连接，双方建立连接。Client与server完成一次读写之后，<br>它们之间的连接并不会主动关闭，后续的读写操作会继续使用这个连接。比如你请求了csdn的一个网页，<br>这个网页里肯定还包含了CSS、JS等等一系列资源，如果你是短连接（也就是每次都要重新建立TCP连接）的话，那你每打开一个网页，<br>基本要建立几个甚至几十个TCP连接，但如果是长连接的话，那么这么多次HTTP请求（这些请求包括请求网页内容，<br>CSS文件，JS文件，图片等等），其实使用的都是一个TCP连接，很显然是可以节省很多消耗的。<br>另外，最后关于长连接还要多提一句，那就是，长连接并不是永久连接的。如果一段时间内（具体的时间长短，<br>是可以在header当中进行设置的，也就是所谓的超时时间），这个连接没有HTTP请求发出的话，那么这个长连接就会被断掉。<br>这一点其实很容易理解，否则的话，TCP连接将会越来越多，直到把服务器的TCP连接数量撑爆到上限为止。现在想想，对于服务器来说，<br>服务器里的这些个长连接其实很有数据库连接池的味道，大家都是为了节省连接重复利用嘛，对不对？<br>长连接的操作步骤是：建立连接——数据传输…（保持连接）…数据传输——关闭连接</p>\n","text":"异步：异步指进程不是一次性执行完毕，而是走走停停，以不可知的速度向前推进。 基本功能 进程管理进程控制、进程同步、进程通信、死锁处理、处理机调度等。 内存管理内存分配、地址映射、内存保护与共享、虚拟内存等。 文件管理文件存储空间的管理、目录管理、文件读写管理和保护等。 设备管理完...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"IT笔记","slug":"IT笔记","count":21,"path":"api/categories/IT笔记.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ps-l\"><span class=\"toc-text\">ps -l</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ps-aux\"><span class=\"toc-text\">ps aux</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ps-aux-grep-threadx\"><span class=\"toc-text\">ps aux | grep threadx</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ps-aux-grep-node-%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89node%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">ps aux | grep node 查看所有node进程</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#pstree-A\"><span class=\"toc-text\">pstree -A</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#top-d-2\"><span class=\"toc-text\">top -d 2</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#netstat-anp-grep-port\"><span class=\"toc-text\">netstat -anp | grep port</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lsof-i-42031\"><span class=\"toc-text\">lsof -i:42031</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#tail-fn-100-xxx-log\"><span class=\"toc-text\">tail -fn 100 xxx.log</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#kill-9-29876\"><span class=\"toc-text\">kill 9 29876</span></a></li></ol>","author":{"name":"Fly","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个在夏天会被芒果砸到的城市靠写代码为生的前职业电竞选手","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Es6 Js规范","uid":"07efd5dd1c92b0165acc3d4c1fb4bbbd","slug":"js规范","date":"2020-06-09T09:59:15.000Z","updated":"2020-06-24T09:29:35.525Z","comments":true,"path":"api/articles/js规范.json","keywords":"node.js blogs IT 互联网 服务端 游戏 mysql redis","cover":null,"text":"数组拷贝 const itemsCopy &#x3D; [...items]; 取值方式 const [first, second] &#x3D; arr; 函数初始化 function f3(a) &#123; const b &#x3D; a || 1; &#x2F;&#x2...","link":"","photos":[],"count_time":{"symbolsCount":423,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Fly","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个在夏天会被芒果砸到的城市靠写代码为生的前职业电竞选手","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"游戏中的运营活动框架思路","uid":"e88abce89c8aca44a71f313b7a0268e8","slug":"游戏中的运营活动框架和思路","date":"2019-11-22T08:15:07.000Z","updated":"2021-11-30T09:01:00.273Z","comments":true,"path":"api/articles/游戏中的运营活动框架和思路.json","keywords":"node.js blogs IT 互联网 服务端 游戏 mysql redis","cover":[],"text":"游戏的运营活动一般会有好多种类型，但是这些类型的功能一般是有共同和非共同的部分，这里记录一个对多类型运营活动的管理框架通过模板表录入运营活动的参数，包括跳转模块，开启方法，红点方法，等级等。如果有类似活动结束发奖的奖励表也可以用表来记录不同活动operation_id对应的奖励进...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"设计方法","slug":"设计方法","count":5,"path":"api/categories/设计方法.json"}],"tags":[{"name":"游戏","slug":"游戏","count":8,"path":"api/tags/游戏.json"}],"author":{"name":"Fly","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个在夏天会被芒果砸到的城市靠写代码为生的前职业电竞选手","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}