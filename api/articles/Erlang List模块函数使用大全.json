{"title":"Erlang List模块函数使用大全","uid":"dfb30fc03fd62385d2aef0d277edc760","slug":"Erlang List模块函数使用大全","date":"2019-05-07T11:49:16.000Z","updated":"2021-11-30T09:04:30.114Z","comments":true,"path":"api/articles/Erlang List模块函数使用大全.json","keywords":"node.js blogs IT 互联网 服务端 游戏 mysql redis","cover":null,"content":"<p>Erlang List模块函数使用大全</p>\n<p>一，带函数Pred<br>1, all(Pred, List) -&gt; boolean()<br>如果List中的每个元素作为Pred函数的参数执行，结果都返回true，那么all函数返回true，<br>否则返回false</p>\n<p>例子：</p>\n<p>lists:all(fun(E) -&gt; true end,[1,2,3,4]).</p>\n<p>结果</p>\n<p>true</p>\n<p>2, any(Pred, List) -&gt; boolean()<br>如果List中至少有一个元素作为Pred函数的参数执行，结果返回true，那么any函数返回true，<br>否则返回false</p>\n<p>例子</p>\n<p>lists:any(fun(E) -&gt; is_integer(E) end,[q,2,a,4]).</p>\n<p>结果</p>\n<p>true</p>\n<p>3，dropwhile(Pred, List1) -&gt; List2<br>将List1列表中的元素作为参数执行Pred函数，如果返回true，将其丢弃，最后返回剩余元素<br>组成的列表</p>\n<p>例子</p>\n<p>lists:dropwhile(fun(E) -&gt; is_atom(E) end,[a,1,2,a,b]).</p>\n<p>结果</p>\n<p>[1,2,a,b]</p>\n<p>4，filter(Pred, List1) -&gt; List2<br>返回一个列表，这个列表是由List1中执行Pred函数返回true的元素组成。</p>\n<p>lists:filter(fun(E) -&gt; is_integer(E) end,[q,2,a,4]).</p>\n<p>结果：</p>\n<p>[2,4]</p>\n <span id=\"more\"></span>\n\n<p>5，map(Fun, List1) -&gt; List2<br>将List1中的每个元素去在Fun中执行，然后返回一个元素，最后返回的这些元素组成一个列表，<br>返回给List2<br>例子：<br>lists:map(fun(X)-&gt;[X,X] end, [a,b,c]).<br>结果：[[a,a],[b,b],[c,c]]</p>\n<p>6，flatmap(Fun, List1) -&gt; List2<br>这个函数和map比较类似，相当于执行了<br>lists:append(lists:map(List1)).<br>也就是把map的结果进行append处理<br>例子：<br>lists:flatmap(fun(X)-&gt;[X,X] end, [a,b,c]).<br>结果：[a,a,b,b,c,c]</p>\n<p>7，foldl(Fun, Acc0, List) -&gt; Acc1<br>Fun这个函数有两个参数<br>第一个参数是List中的元素，第二个参数是Fun函数执行完后的返回值，这个参数第一次执行时<br>就是Acc0<br>例子：对[1,2,3,4,5]求和<br>lists:foldl(fun(X, Sum) -&gt; X + Sum end, 0, [1,2,3,4,5]).<br>结果：15<br>执行过程：首先，Fun第一次执行时，X的值取列表List的第一个元素1，Sum取0,<br>  Fun第二次执行时，X的值取列表List的第二个元素2，Sum取Fun第一次的返回值<br>  依次轮推，直到List中每个元素执行完，最后foldl返回最后一次的结果。</p>\n<p>8，foldr(Fun, Acc0, List) -&gt; Acc1<br>foldr这个函数和foldl比较相似<br>不过是Fun执行时，X的值先取List的最后一个，然后取倒数第二个。</p>\n<p>9，foreach(Fun, List) -&gt; ok<br>以List中的每个元素为参数执行Fun函数，执行顺序按照List中元素的顺序，这个函数最后返回ok。是单边的<br>例子 lists:foreach(fun(X)-&gt;<br>  %%using X to do somethings<br>  %%<br>  end,List)</p>\n<p>10，keymap(Fun, N, TupleList1) -&gt; TupleList2<br>对TupleList1中的每个元素的第N项作为参数在Fun中处理，然后这个第N项最后就被替换为Fun执行完返回的值<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”}].<br>lists:keymap(fun(X)-&gt;<br>  list_to_atom(X)<br>  end,2,List1).<br>结果：<br>[{name,zhangjing},{name,zhangsan}]</p>\n<p>11，mapfoldl(Fun, Acc0, List1) -&gt; {List2, Acc1}<br>这个函数等于是把map和foldl函数结合起来。将List1中的每一个元素执行Fun函数，执行后花括号的第一个值作为返回值返回，<br>第二个值作为参数传给Fun，作为下一次用。<br>例子：<br>lists:mapfoldl(fun(X, Sum) -&gt; {2*X, X+Sum} end,<br>0, [1,2,3,4,5]).<br>{[2,4,6,8,10],15}</p>\n<p>12，mapfoldr(Fun, Acc0, List1) -&gt; {List2, Acc1}<br>这个函数相当于将map和foldr结合起来</p>\n<p>13，merge(Fun, List1, List2) -&gt; List3<br>这个函数的功能也是把List1和List2合并到一起，只不过是List1和List2的元素要作为参数在Fun中执行，如果<br>Fun返回true，那么返回值就是List1在前，List2在后。否则，反之。<br>例子<br>lists:merge(fun(A,B)-&gt; false end, [3,4],[2,1]).<br>结果<br>[2,1,3,4]</p>\n<p>14，partition(Pred, List) -&gt; {Satisfying, NotSatisfying}<br>这个函数的功能是将List分成两个List1和List2，List1是将List元素作为参数去Pred函数中执行返回true的元素组成，<br>List2由Pred返回false的元素组成。<br>注意，返回的是一个元组<br>例子<br>lists:partition(fun(A) -&gt; A rem 2 == 1 end, [1,2,3,4,5,6,7]).<br>结果<br>{[1,3,5,7],[2,4,6]}</p>\n<p>15，sort(Fun, List1) -&gt; List2<br>如果Fun函数返回true，则排序是从小到大的顺序，否则，从大到小。<br>其中Fun有两个参数。<br>例子<br>lists:sort(fun(A,B)-&gt; false end,[1,2,3]).<br>结果<br>[3,2,1]</p>\n<p>16，splitwith(Pred, List) -&gt; {List1, List2}<br>将List分成List1和List2，<br>List1由List中元素在Pred函数返回true的组成，但是有一点，如果遇到为false的，则将剩下的元素<br>全部放到List2中，List1中就只有前面为true的。<br>例子<br>lists:splitwith(fun(A) -&gt; is_atom(A) end, [a,b,1,c,d,2,3,4,e]).<br>结果<br>{[a,b],[1,c,d,2,3,4,e]}</p>\n<p>17，takewhile(Pred, List1) -&gt; List2<br>List1中的元素element依次执行Pred(element),如果返回true，则获取这个元素，直到有元素执行Pred(element)返回false<br>例子<br>lists:takewhile(fun(E)-&gt; is_atom(E) end,[a,b,1,e,{c},[d]]).<br>结果<br>[a,b]</p>\n<p>18,umerge(Fun, List1, List2) -&gt; List3<br>这个函数和merge不同的是 当Fun返回true时，返回的List3中不能出现相同的元素<br>疑问：但是当Fun返回false时，List3中可以有相同的元素。<br>例子(Fun返回true的情况)<br>lists:umerge(fun(A,B)-&gt; true end,[1,2],[2,3]).<br>结果<br>[1,2,3]<br>(Fun为false的情况)<br>lists:umerge(fun(A,B)-&gt; false end,[1,2],[2,3]).<br>[2,3,1,2]<br>好神奇，竟然2有重复</p>\n<p>19，usort(Fun, List1) -&gt; List2<br>按照Fun函数进行排序，如果Fun返回true，那么只返回List1的第一个元素<br>如果Fun返回false，那么List1从大到小排序<br>例子1<br>lists:usort(fun(A,B) -&gt; true end, [1,2,2,3,4]).<br>结果<br>[1]</p>\n<p>例子2<br>lists:usort(fun(A,B) -&gt; false end, [1,2,2,3,4]).<br>结果<br>[4,3,2,2,1]</p>\n<p>20，zipwith(Combine, List1, List2) -&gt; List3<br>将List1和list2中的每个元素执行Combine函数，然后返回一个元素，List3就是由Combine函数返回的一个个元素组成的。<br>功能和map有点像，但是这里是对两个列表的操作。<br>例子<br>lists:zipwith(fun(X, Y) -&gt; X+Y end, [1,2,3], [4,5,6]).<br>结果<br>[5,7,9]</p>\n<p>21，zipwith3(Combine, List1, List2, List3) -&gt; List4<br>将List1和list2，list3中的每个元素执行Combine函数，然后返回一个元素，List4就是由Combine函数返回的一个个元素组成的。<br>功能和map有点像，但是这里是对三个列表的操作。<br>例子<br>lists:zipwith3(fun(X, Y, Z) -&gt; X+Y+Z end, [1,2,3], [4,5,6],[7,8,9]).<br>结果<br>[12,15,18]</p>\n<p>二，不带函数Pred<br>1，append(ListOfLists) -&gt; List1<br>ListOfLists都是由List组成的，而List一个列表，里面可以是任何类型的元素<br>这个函数就是将ListOfLists里面的所有列表的元素按顺序编成一个列表<br>提示：ListOfLists里面的元素必须都是列表才能用这个函数</p>\n<p>例子</p>\n<p>lists:append([[1, 2, 3], [a, b], [4, 5, 6]]).</p>\n<p>结果：</p>\n<p>[1,2,3,a,b,4,5,6]</p>\n<p>2，append(List1, List2) -&gt; List3<br>将List1和List2两个列表连接起来，组成一个列表，然后返回新的这个列表<br>这个函数的功能等同于List1 ++ List2</p>\n<p>例子</p>\n<p>lists:append(“abc”, “def”).</p>\n<p>结果</p>\n<p>“abcdef”</p>\n<p>3，concat(Things) -&gt; string()<br>这里的Things是一个列表，里面由atom() | integer() | float() | string()<br>将这个列表里面的元素拼成一个字符串，然后返回</p>\n<p>例子</p>\n<p>lists:concat([doc, ‘/‘, file, ‘.’, 3]).</p>\n<p>结果</p>\n<p>doc/file.3”</p>\n<p>4，delete(Elem, List1) -&gt; List2<br>List1是由很多Element组成的，这个函数的功能是在List1中寻找第一个和Elem元素一样的，<br>然后删除之，返回删除后新的列表。</p>\n<p>例子</p>\n<p>lists:delete({name,”zhangsan”},[{name,”lisi”},{name,”zhangsan”},{name,”wangmazi”})).</p>\n<p>结果</p>\n<p>[{name,”lisi”},{name,”wangmazi”}]</p>\n<p>5，duplicate(N, Elem) -&gt; List<br>返回一个由N个Elem组成的列表。</p>\n<p>例子</p>\n<p>lists:duplicate(5,”test”).</p>\n<p>结果</p>\n<p>[“test”,”test”,”test”,”test”,”test”]</p>\n<p>6，flatlength(DeepList) -&gt; integer() &gt;= 0<br>我的理解是DeepList就是列表里面套列表<br>计算列表的长度，即用flatten函数将DeepList转化成List后元素的个数<br>这个函数和length()的区别就是：<br>length函数是得到列表元素的个数，<br>而flatlength函数是先将DeepList转化成List后的个数<br>譬如说List = [1,2,[3,4]]这个列表用<br>length(List)求的值是：3<br>lists:flatlength(List)求的值是：4<br>其实lists:flatlength(List) = length(flatten(List))</p>\n<p>7，flatten(DeepList) -&gt; List<br>将DeepList变成只有term()的list<br>例子：<br>lists:flatten([[a,a],[b,b],[c,c]]).<br>结果：<br>[a,a,b,b,c,c]</p>\n<p>8，flatten(DeepList, Tail) -&gt; List<br>就是将DeepList变成只有term的List后，在后面再加一个Tail。<br>例子：<br>lists:flatten([[a,a],[b,b],[c,c]],[dd]).<br>结果：<br>[a,a,b,b,c,c,dd]</p>\n<p>9,keydelete(Key, N, TupleList1) -&gt; TupleList2<br>这个函数适合处理列表里面的元素是元组的情况<br>删除TupleList1中元素第N个元素和Key一致的元素，只删除第一个一样的，后面一样的不删除<br>例子：<br>List = [{name,”zhangjing”},{sex,”male”},{name,”zhangsan”},{sex,”male”}],<br>lists:keydelete(“male”,2,List)<br>结果：<br>[{name,”zhangjing”},{name,”zhangsan”},{sex,”male”}]</p>\n<p>10,keyfind(Key, N, TupleList) -&gt; Tuple | false<br>查找TupleList中的一个Tuple，如果查找到，返回，如果没有查找到，则返回false<br>这个Tuple必须满足第N个元素和key是一样。<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”}].<br>lists:keyfind(“zhangjing”,2,List1)<br>结果：{name,”zhangjing”}</p>\n<p>11，keymember(Key, N, TupleList) -&gt; boolean()<br>如果TupleList中的元素中存在第N个元素和key一致，则返回true，否则返回false<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”}].<br>lists:keymember(“zhangjing”,2,List1).<br>结果：true</p>\n<p>12，keymerge(N, TupleList1, TupleList2) -&gt; TupleList3<br>将TupleList1和TupleList2进行混合，组成一个TupleList，<br>新组成的TupleList是按照Tuple的第N个元素进行排序的<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”}].<br>List2 = [{nick,”zj”},{nick,”zs”}].<br>lists:keymerge(2,List1,List2).<br>结果：<br>[{name,”zhangjing”},<br> {name,”zhangsan”},<br> {nick,”zj”},<br> {nick,”zs”}]</p>\n<p>13，keyreplace(Key, N, TupleList1, NewTuple) -&gt; TupleList2<br>在TupleList1的Tuple中找出第N个元素和Key一致，然后用NewTuple将这个Tuple替换掉，如果没有找到<br>，则返回原来的TupleList1<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”}]<br>lists:keyreplace(“zhangjing”,2,List1,{nickname,”netzj”}).<br>结果：<br>[{nickname,”netzj”},{name,”zhangsan”}]</p>\n<p>14，keysearch(Key, N, TupleList) -&gt; {value, Tuple} | false<br>这个函数和keyfind差不多，就是返回值的结构不一样<br>也是在TupleList中找一个Tuple，这个Tuple的第N个元素和Key一样。<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”}]<br>lists:keysearch(“zhangjing”,2,List1).<br>结果：<br>{value,{name,”zhangjing”}}</p>\n<p>15，keysort(N, TupleList1) -&gt; TupleList2<br>对TupleList1中的Tuple按照第N个元素进行排序，然后返回一个新的顺序的TupleList。<br>不过这种排序是固定的。<br>例子：<br>List1 = [{name,”zhangsan”},{name,”zhangjing”}].<br>lists:keysort(2,List1).<br>结果：<br>[{name,”zhangjing”},{name,”zhangsan”}]</p>\n<p>16，keystore(Key, N, TupleList1, NewTuple) -&gt; TupleList2<br>这个函数和keyreplace函数比较像，不同的是，这个keystore在没有找到对应的Tuple时，<br>会将这个NewTuple追加在这个TupleList1的最后。<br>例子：<br>List1 = [{name,”zhangsan”},{name,”zhangjing”}].<br>找到了的情况<br>lists:keystore(“zhangjing”,2,List1,{name,”netzhangjing”}).<br>[{name,”netzhangjing”},{name,”zhangsan”}]<br>没有找到的情况<br>lists:keystore(“zhanging”,2,List1,{name,”netzhangjing”}).<br>[{name,”zhangjing”},{name,”zhangsan”},{name,”netzhangjing”}]</p>\n<p>17，keytake(Key, N, TupleList1) -&gt; {value, Tuple, TupleList2} | false<br>在TupleList1中找Tuple，这个Tuple的第N个元素和Key一致，如果找到了这么一个Tuple<br>那么返回，{value, Tuple, TupleList2} 其中TupleList2是去掉Tuple的TupleList1.<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”},{name,”lisi”}].<br>lists:keytake(“zhangjing”,2,List1).<br>结果：<br>{value,{name,”zhangjing”},[{name,”zhangsan”},{name,”lisi”}]}</p>\n<p>18，last(List) -&gt; Last<br>返回：List最后一个元素<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”},{name,”lisi”}].<br>lists:last(List1).<br>结果：<br>{name,”lisi”}</p>\n<p>19，max(List) -&gt; Max<br>取出List中最大的元素，一般List是整型时比较适合。<br>例子：<br>lists:max([1,10,15,6]).<br>结果：<br>15</p>\n<p>20，member(Elem, List) -&gt; boolean()<br>如果Elem和List中的某个元素匹配（相同），那么返回true，否则返回false<br>例子<br>lists:member({sex,”1”},[{sex,”1”},{sex,”2”},{sex,”3”}]).<br>结果：<br>true</p>\n<p>21，merge(ListOfLists) -&gt; List1<br>ListOfLists是一个列表，里面由子列表构成<br>这个函数的功能就是将这些子列表合并成一个列表。<br>例子：<br>lists:merge([[{11}],[{22}],[{33}]]).<br>结果<br>[{11},{22},{33}]</p>\n<p>22，merge(List1, List2) -&gt; List3<br>List1和List2分别是一个列表，这个函数的功能是将这两个列表合并成一个列表。<br>例子：<br>lists:merge([11],[22]).<br>结果<br>[11,22]<br>[2,1,3,4]</p>\n<p>23, merge3(List1, List2, List3) -&gt; List4<br>将List1，List2，List3合并成一个列表<br>例子<br>lists:merge3([11],[22],[33,44]).<br>结果：<br>[11,22,33,44]</p>\n<p>24，min(List) -&gt; Min<br>返回List中的最小的元素，和max函数对应<br>例子<br>lists:min([1,2,3]).<br>结果<br>1</p>\n<p>25，nth(N, List) -&gt; Elem<br>返回List中的第N个元素。<br>例子<br>lists:nth(2,[{name,”zhangsan”},{name,”lisi”},{name,”wangmazi”}]).<br>结果<br>{name,”lisi”}</p>\n<p>26，nthtail(N, List) -&gt; Tail<br>返回List列表中第N个元素后面的元素<br>例子<br>lists:nthtail(3, [a, b, c, d, e]).<br>结果<br>[d,e]</p>\n<p>27，prefix(List1, List2) -&gt; boolean()<br>如果List1是List2的前缀(也就是说List1和List2前部分相同)，那么返回true，否则返回false</p>\n<p>28，reverse(List1) -&gt; List2<br>将List1反转<br>例子<br>lists:reverse([1,2,3,4]).<br>结果<br>[4,3,2,1]</p>\n<p>29,reverse(List1, Tail) -&gt; List2<br>将List1反转，然后将Tail接在反转List1的后面，然后返回<br>例子<br>lists:reverse([1, 2, 3, 4], [a, b, c]).<br>[4,3,2,1,a,b,c]</p>\n<p>30，seq(From, To) -&gt; Seq<br>其中From和To都是整型，这个函数返回一个从From到To的一个整型列表。<br>例子<br>lists:seq(1,10).<br>结果<br>[1,2,3,4,5,6,7,8,9,10]</p>\n<p>31，seq(From, To, Incr) -&gt; Seq<br>返回一个整型列表，这个列表的后一个元素比前一个元素大Incr。<br>例子<br>lists:seq(1,10,4).<br>[1,5,9]</p>\n<p>32，sort(List1) -&gt; List2<br>将List1中的元素从小到大排序，然后返回新的一个列表。<br>例子<br>lists:sort([3,2,1]).<br>结果<br>[1,2,3]</p>\n<p>33，split(N, List1) -&gt; {List2, List3}<br>将List1分成List2和List3<br>其中List2包括List1的前N个元素，List3包含剩余的。<br>例子<br>lists:split(3,[1,2,3,4,5]).<br>结果<br>{[1,2,3],[4,5]}</p>\n<p>这个函数和partition数有区别，partition是遍历全部的List，而splitwith在遍历时遇到false的情况<br>则马上结束遍历，返回结果。</p>\n<p>34，sublist(List1, Len) -&gt; List2<br>返回从第一个元素到第Len个元素的列表，这个Len大于List1的长度时，返回全部。<br>例子<br>lists:sublist([1,2,3,4,5,6],3).<br>结果<br>[1,2,3]</p>\n<p>35，sublist(List1, Start, Len) -&gt; List2<br>返回从List1的第Start个位置开始，后面Len个元素的列表。<br>例子<br>lists:sublist([1,2,3,4], 2, 2).<br>结果<br>[2,3]</p>\n<p>36，subtract(List1, List2) -&gt; List3<br>等同于 List1 – List2<br>这个函数功能是返回一个List1的副本，对于List2中的每个元素，第一次在List1副本中出现时被删掉。<br>例子<br>lists:subtract(“112233”,”12”).<br>结果<br>“1233”</p>\n<p>37，suffix(List1, List2) -&gt; boolean()<br>如果List1是List2的后缀，那么返回true，否则返回false<br>例子<br>lists:suffix(“22”,”1122”).<br>结果<br>true</p>\n<p>38，sum(List) -&gt; number()<br>返回List中每个元素的和。其中List中的元素都应该是number()类型的。<br>例子<br>lists:sum([1,2,3,4]).<br>结果<br>10</p>\n<p>39，ukeymerge(N, TupleList1, TupleList2) -&gt; TupleList3<br>TupleList1和TupleList2里面的元素都是元组<br>将TupleList1和TupleList2合并，合并的规则是按照元组的第N个元素，如果第N个元素有相同的，那么保留TupleList1中<br>的，删除TupleList2中的。</p>\n<p>40，ukeysort(N, TupleList1) -&gt; TupleList2<br>TupleList1里面的元素都是元组<br>这个函数也同样返回一个元素是元组的列表，返回的这个列表是按照元组的第N个元素来排序的，如果元组中有出现<br>第N个元素相同的情况，删除掉后面的一个元组。<br>例子<br>lists:ukeysort(1,[{name,”zhangsan”},{sex,”male”},{name,”himan”}]).<br>结果<br>[{name,”zhangsan”},{sex,”male”}]</p>\n<p>41，umerge(ListOfLists) -&gt; List1<br>这个函数和merge唯一不同的就是，里面不能出现相同的元素，如果出现相同的，那么删除之，只保留一个唯一的<br>例子<br>lists:umerge([[1,2],[2,3]]).<br>结果<br>[1,2,3]<br>分析：由于[[1,2],[2,3]]中merge后是[1,2,2,3],这个时候有两个相同的元素2，所以只保存一个2，所以结果是[1,2,3].</p>\n<p>42，umerge3(List1, List2, List3) -&gt; List4<br>将List1, List2, List3合并<br>和merge3不同的是返回的List4中不能出现重复的元素<br>例子<br>lists:merge3([1,2],[2,3],[3,4]).<br>结果<br>[1,2,3,4]</p>\n<p>43，unzip(List1) -&gt; {List2, List3}<br>List1里面的元素是元组，每个元组由两个元素组成，返回值List2包含每个List1中每个元组的第一个元素<br>返回值List3包含每个List1中每个元组的第二个元素。<br>例子<br>lists:unzip([{name,”zhangsan”},{sex,”male”},{city,”hangzhou”}]).<br>结果<br>{[name,sex,city],[“zhangsan”,”male”,”hangzhou”]}</p>\n<p>44，unzip3(List1) -&gt; {List2, List3, List4}<br>List1里面的元素是元组，每个元组由三个元素组成，返回值List2包含每个List1中每个元组的第一个元素；<br>返回值List3包含每个List1中每个元组的第二个元素；返回值List4包含每个List1中每个元组的第三个元素。<br>例子<br>lists:unzip3([{name,”zhangsan”,”apple”},{sex,”male”,”banana”},{city,”hangzhou”,”orange”}]).<br>结果<br>{[name,sex,city],<br> [“zhangsan”,”male”,”hangzhou”],<br> [“apple”,”banana”,”orange”]}<br>注意，最终返回的是一个元组。</p>\n<p>45，usort(List1) -&gt; List2<br>将List1按照从小到大的顺序排序，如果排序后有重复的元素，删除重复的，只保存一个唯一的。<br>例子<br>lists:usort([4,3,2,1,2,3,4]).<br>结果<br>[1,2,3,4]</p>\n<p>46，zip(List1, List2) -&gt; List3<br>将两个长度相同的列表合并成一个列表<br>List3是里面的每一个元组的第一个元素是从List1获取的，而每个元组的第二个元素是从List2中获取的<br>例子<br>lists:zip([name,sex,city],[“zhangsan”,”male”,”hangzhou”]).<br>结果<br>[{name,”zhangsan”},{sex,”male”},{city,”hangzhou”}]<br>注意，如果List1和List2长度不一致，那么这个函数将会报错。</p>\n<p>47，zip3(List1, List2, List3) -&gt; List4<br>将三个长度相同的列表合并成一个列表<br>List3是里面的每一个元组的第一个元素是从List1获取的，而每个元组的第二个元素是从List2中获取的<br>每个元组的第三个元素是从List3中获取的。<br>例子<br>lists:zip3([name,sex,city],[“zhangsan”,”male”,”hangzhou”],[“nick”,”1”,”zhejiang”]).<br>结果<br>[{name,”zhangsan”,”nick”},<br> {sex,”male”,”1”},<br> {city,”hangzhou”,”zhejiang”}]</p>\n","text":"Erlang List模块函数使用大全 一，带函数Pred1, all(Pred, List) -&gt; boolean()如果List中的每个元素作为Pred函数的参数执行，结果都返回true，那么all函数返回true，否则返回false 例子： lists:all(fun...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"IT笔记","slug":"IT笔记","count":21,"path":"api/categories/IT笔记.json"}],"tags":[{"name":"Erlang","slug":"Erlang","count":2,"path":"api/tags/Erlang.json"}],"toc":"","author":{"name":"Fly","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个在夏天会被芒果砸到的城市靠写代码为生的前职业电竞选手","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"游戏中大型自动比赛玩法设计","uid":"64fa7148428d7d977cb2502b7dbd3115","slug":"游戏中大型比赛玩法设计思路","date":"2019-07-30T08:08:45.000Z","updated":"2021-11-30T09:00:52.167Z","comments":true,"path":"api/articles/游戏中大型比赛玩法设计思路.json","keywords":"node.js blogs IT 互联网 服务端 游戏 mysql redis","cover":[],"text":"争霸赛赛程范例3月1日 0：00~3月3日 12:00 报名 40级以上手动报名3月3日 13：00 淘汰赛 “13:00取数据，提前1小时向玩家发送邮件提醒13:10开始出战报，每隔5分钟出1场战报天榜负5局进入地榜，地榜负5局则被淘汰”3月4日 14:00 16强赛（32进1...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"17 mins."},"categories":[{"name":"设计方法","slug":"设计方法","count":5,"path":"api/categories/设计方法.json"}],"tags":[{"name":"游戏","slug":"游戏","count":8,"path":"api/tags/游戏.json"}],"author":{"name":"Fly","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个在夏天会被芒果砸到的城市靠写代码为生的前职业电竞选手","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Erlang OTP学习","uid":"6977849a35ac85d5974580bb39a3c432","slug":"Erlang-OTP学习","date":"2019-04-09T08:50:32.000Z","updated":"2021-11-30T09:04:38.355Z","comments":true,"path":"api/articles/Erlang-OTP学习.json","keywords":"node.js blogs IT 互联网 服务端 游戏 mysql redis","cover":null,"text":"1.-behaviour(gen_server)它表示让编译器检查，当前module是否实现了gen_server指定的所有回调接口 2.gen_server:start_link(ServerName, Module, Args, Options) -&gt; Result这个...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"IT笔记","slug":"IT笔记","count":21,"path":"api/categories/IT笔记.json"}],"tags":[{"name":"Erlang","slug":"Erlang","count":2,"path":"api/tags/Erlang.json"}],"author":{"name":"Fly","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个在夏天会被芒果砸到的城市靠写代码为生的前职业电竞选手","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}