{"title":"游戏中大型自动比赛玩法设计","uid":"64fa7148428d7d977cb2502b7dbd3115","slug":"游戏中大型比赛玩法设计思路","date":"2019-07-30T08:08:45.000Z","updated":"2021-11-30T09:00:52.167Z","comments":true,"path":"api/articles/游戏中大型比赛玩法设计思路.json","keywords":"node.js blogs IT 互联网 服务端 游戏 mysql redis","cover":[],"content":"<p>争霸赛赛程范例<br>3月1日 0：00~3月3日 12:00    报名    40级以上手动报名<br>3月3日 13：00    淘汰赛    “13:00取数据，提前1小时向玩家发送邮件提醒<br>13:10开始出战报，每隔5分钟出1场战报<br>天榜负5局进入地榜，地榜负5局则被淘汰”<br>3月4日 14:00    16强赛（32进16）    “每小时1局，每局取1次数据，5局3胜制<br>天地榜同时进行<br>比赛开始前1小时向玩家发送邮件提醒取数据制度”<br>3月5日 14:00    16进8<br>3月6日 14:00    8进4<br>3月7日 14:00    半决赛<br>3月8日 14:00    决赛<br>3月8日 决赛全部结束    统一发放奖励    </p>\n<p>比赛的时间控制由单独时间进程来控制时间的推进，相当于php中的crontab,表结构上一个玩家比赛进程表player_race,<br>一个各阶段玩家成员信息表player_race_member，后期系统匹配各阶段玩家匹配信息表player_race_opponent，<br>一个各阶段玩家战报信息表player_race_report，一个各阶段玩家结果表player_race_result，<br>玩家表可以分为  玩家比赛信息表  player_st_jjc_race 玩家匹配信息表 player_st_jjc_race_opponent 玩家日志表 player_st_jjc_race_score_log</p>\n<p>第一步 报名<br>很简单直接报名请求记录玩家数据就行,报名时间结束时触发事件对所有玩家进行匹配</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">case try_get_player_server_war(PlayerId) of\n    null -&gt;\n        Tran &#x3D; fun() -&gt;\n            game_db:write(#player_server_war &#123;\n                player_id  &#x3D; PlayerId, \n                apply_time &#x3D; lib_misc:get_local_timestamp()\n            &#125;)\n            % mod_deploy:get(PlayerId, ?RACE_SERVER_WAR)\n        end, \n        game_db:do(Tran);\n    _ -&gt;\n        exit(already_apply)\nend.\n\n% 本服报名结束手机玩家数据\napply_over() -&gt;\n    List &#x3D; get_all_player_server_war(),\n    Tran &#x3D; fun() -&gt;\n        lists:foreach(\n            fun(Rec) -&gt;\n                game_db:write(Rec #player_server_war &#123;\n                    race_step &#x3D; ?RS_TIAN_BANG_TAOTAI\n                &#125;)\n            end, \n            List\n        )\n    end,\n    game_db:do(Tran),\n    ?INFO(&quot;apply_over&quot;,[]),\n    ZoneList &#x3D; lists:foldl(\n        fun(PlayerServerWar, R) -&gt;\n            [PlayerServerWar #player_server_war.player_id | R]\n        end,\n        [],\n        get_all_player_server_war()\n    ),\n\n    mod_race:init_race_member(\n       ?RACE_SERVER_WAR,\n       0,\n       ?RS_TIAN_BANG_TAOTAI,\n       0,\n       ZoneList,\n       normal\n    ).</code></pre>\n<p>注意的是用一个单独的进程来管理活动步骤开启结束<br><img src=\"/post/Er15646489002180.png\" alt=\"Er15646489002180\"></p>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">% 每一个活动开始所要做的处理\nactivity_start (ActivityId) -&gt;\n    case mod_server:is_game_server() of\n        true -&gt;\n            xdh_race_srv:activity_start(ActivityId);\n        false -&gt;\n            case mod_server:is_cc_server() of\n                true -&gt;\n                    % cc_server_war_cron_srv:activity_start(Id);\n                    noop;\n                false -&gt;\n                    noop\n            end\n    end.\n\n% 每一个活动结束所要做的处理\nactivity_stop (ActivityId) -&gt;\n   case mod_server:is_game_server() of\n        true -&gt;\n            xdh_race_srv:activity_stop(ActivityId);\n        false -&gt;\n            case mod_server:is_cc_server() of\n                true -&gt;\n                    % cc_server_war_cron_srv:activity_stop(Id);\n                    noop;\n                false -&gt;\n                    noop\n            end\n    end.</code></pre>\n<p>在到点时间的相应上做特殊处理</p>\n<p>第二步 开启淘汰赛<br>淘汰赛的开启同样用时间进程来控制，到点后调用启动方法<br><img src=\"/post/Er15646493808263.png\" alt=\"Er15646493808263\"> （判断结束 、清上一轮数据）<br>淘汰赛相当于一个递归的过程，全服玩家进行了一场比赛后记录玩家信息及淘汰结果直到淘汰赛结束的条件,同时需要一个全服步骤数据记录，然后循环比赛<br>其中每一轮淘汰赛可分为 判断结束 、清上一轮数据 、不重复随机匹配 、 战斗及数据记录 、 循环<br><img src=\"/post/Er15647109579023.png\" alt=\"Er15647109579023\"> （不重复随机匹配 循环）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&lt;!-- 战斗部分及记录 --&gt;\nrace_fight (RaceId, ZoneId, RaceStep, TeamIdA, TeamIdB) -&gt;\n    #player_race &#123;\n        race_times &#x3D; RaceTimes\n    &#125; &#x3D; get_player_race(RaceId, ZoneId), \n\n    Tran &#x3D; fun() -&gt;\n        case race_call(RaceId, fight, [RaceStep, TeamIdA, TeamIdB]) of\n            [] -&gt;\n                exit(&#123;invalid_fight, RaceId, TeamIdA, TeamIdB&#125;);\n            ReportList -&gt;\n                &#123;_, WinTeamId&#125; &#x3D; lists:foldr(\n                    fun(Report, &#123;NowIndex, NowWinTeamId&#125;) -&gt;\n                        #war_result &#123;\n                            winner       &#x3D; &#123;_, WinnerId&#125;, \n                            army_result1 &#x3D; #army_result &#123;\n                                army_key &#x3D; &#123;_, PlayerIdA&#125;\n                            &#125;, \n                            army_result2 &#x3D; #army_result &#123;\n                                army_key &#x3D; &#123;_, PlayerIdB&#125;\n                            &#125;\n                        &#125; &#x3D; Report, \n\n                        NewWinTeamId &#x3D; if\n                            NowIndex &#x3D;:&#x3D; length(ReportList) -&gt;\n                                WinTeamId &#x3D; if\n                                    WinnerId &#x3D;:&#x3D; PlayerIdA -&gt;\n                                        TeamIdA;\n                                    true -&gt;\n                                        TeamIdB\n                                end, \n\n                                game_db:write(#player_race_result &#123;\n                                    race_id     &#x3D; RaceId, \n                                    zone_id     &#x3D; ZoneId, \n                                    race_step   &#x3D; RaceStep, \n                                    player_id   &#x3D; TeamIdA, \n                                    player_id1  &#x3D; TeamIdB, \n                                    race_times  &#x3D; RaceTimes, \n                                    version     &#x3D; ?GET_ENV(vsn, &quot;&quot;), \n                                    report_time &#x3D; lib_misc:get_local_timestamp(), \n                                    winner_id   &#x3D; WinTeamId\n                                &#125;), \n\n                                WinTeamId;\n                            true -&gt;\n                                NowWinTeamId\n                        end, \n\n                        game_db:write(#player_race_report &#123;\n                            race_id     &#x3D; RaceId, \n                            zone_id     &#x3D; ZoneId, \n                            race_step   &#x3D; RaceStep, \n                            player_id   &#x3D; TeamIdA, \n                            race_times  &#x3D; RaceTimes, \n                            index       &#x3D; NowIndex, \n                            attacker_id &#x3D; PlayerIdA, \n                            defender_id &#x3D; PlayerIdB, \n                            winner_id   &#x3D; WinnerId, \n                            report_id   &#x3D; war_report_srv:record_war_report(Report, 30 * 86400)\n                        &#125;), \n\n                        &#123;\n                            NowIndex - 1, \n                            NewWinTeamId\n                        &#125;\n                    end, \n                    &#123;length(ReportList), 0&#125;, \n                    ReportList\n                ), \n\n                WinTeamId\n        end\n    end, \n\n    &#123;atomic, TeamId&#125; &#x3D; game_db:do(Tran), \n    TeamId.</code></pre>\n<p>在淘汰赛结束后，将剩余晋级玩家进入晋级赛步骤，同时初始化随机匹配<br><img src=\"/post/Er15647120482687.png\" alt=\"Er15647120482687\"><br>一下两种匹配方式</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">init_race_member(RaceId, ZoneId, RaceStep, Group, TeamIdList, normal) -&gt;\n    Tran &#x3D; fun() -&gt;\n        lists:foldl(\n            fun(TeamId, NowIndex) -&gt;\n                game_db:write(#player_race_member &#123;\n                    race_id   &#x3D; RaceId, \n                    race_step &#x3D; RaceStep, \n                    zone_id   &#x3D; ZoneId, \n                    group     &#x3D; Group, \n                    index     &#x3D; NowIndex, \n                    player_id &#x3D; TeamId\n                &#125;), \n\n                NowIndex + 1\n            end, \n            1, \n            TeamIdList\n        )\n    end, \n\n    game_db:do(Tran);\n\ninit_race_member(RaceId, ZoneId, RaceStep, Group, TeamIdList, random) -&gt;\n    #race_step &#123;\n        match_num &#x3D; MatchNum\n    &#125; &#x3D; get_race_step(RaceStep), \n\n    Step &#x3D; get_index_step(length(TeamIdList), MatchNum), \n\n    Tran &#x3D; fun() -&gt;\n        lists:foldl(\n            fun(TeamId, NowIndex) -&gt;\n                game_db:write(#player_race_member &#123;\n                    race_id   &#x3D; RaceId, \n                    race_step &#x3D; RaceStep, \n                    zone_id   &#x3D; ZoneId, \n                    group     &#x3D; Group, \n                    index     &#x3D; NowIndex, \n                    player_id &#x3D; TeamId\n                &#125;), \n\n                if\n                    NowIndex + Step &gt; MatchNum * 2 -&gt;\n                        1 + Step div 2;\n                    true -&gt;\n                        NowIndex + Step\n                end\n            end, \n            1, \n            lib_misc:shuffle(TeamIdList)\n        )\n    end, \n\n    game_db:do(Tran);</code></pre>\n\n<p>第三步 战报<br>战报开启也是进程时间来控制<br><img src=\"/post/Er15647145661718.png\" alt=\"Er15647145661718\"></p>\n<p>第四步 开启晋级赛<br>同样是进程计时器开启，比赛流程除了一局定输赢以外和淘汰赛基本一致，比赛也是一次性打完，战报根据时间慢慢的播放</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">% 开启杯赛\ntimer_start_race() -&gt;\n    case mod_server:is_cc_server() of\n        true -&gt;\n            % cc_server_war_cron_srv:start_race(0);\n            noop;\n        false -&gt;\n            Times &#x3D; mod_server:get_player_server_int_data(?SDT_SERVER_WAR_RACE_TIMES),\n            xdh_race_srv:try_apply(mod_server,set_player_server_int_data,[?SDT_SERVER_WAR_RACE_TIMES,Times + 1]),\n            start_race(),\n            mod_timer:reset(1, ?TIMER_XIAN_DAO_HUI_BEI_SAI)\n    end. \n\nstart_race() -&gt;\n    RaceStep    &#x3D; get_server_war_race_step(), \n    PlayerRace  &#x3D; mod_race:get_player_race(?RACE_SERVER_WAR,0),\n    IsOver &#x3D; case mod_race:start_race(?RACE_SERVER_WAR, 0, RaceStep, 3) of\n        true -&gt;\n            true;\n        _ -&gt; \n            mod_timer:reset(0, ?TIMER_XIAN_DAO_HUI_BEI_SAI, 3420),\n            false\n    end,\n\n    RaceTimes &#x3D; if\n        RaceStep &#x3D;&#x2F;&#x3D; PlayerRace #player_race.race_step -&gt;\n            1;\n        true -&gt;\n            PlayerRace #player_race.race_times + 1\n    end,\n    xdh_race_srv:try_apply(mod_server,set_player_server_int_data,[?SDT_SERVER_WAR_RACE_TIMES,RaceTimes]),\n    deal_receive_beisai_data(RaceStep,IsOver).\n</code></pre>\n<p>战斗部分基本一致多一个匹配结果记录表</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">start_race(RaceId, ZoneId, RaceStep, WinTimes) -&gt;\n    #race_step &#123;\n        match_num &#x3D; MatchNum, \n        next_race &#x3D; NextRace, \n        next_step &#x3D; NextStep\n    &#125; &#x3D; get_race_step(RaceStep), \n\n    Tran &#x3D; fun() -&gt;\n        PlayerRace &#x3D; get_player_race(RaceId, ZoneId), \n\n        if\n            PlayerRace #player_race.race_step &#x3D;:&#x3D; RaceStep,\n                PlayerRace #player_race.race_times &#x3D;&#x2F;&#x3D; 0 -&gt;\n                case check_race_over(RaceId, ZoneId, RaceStep) of\n                    true -&gt;\n                        exit(race_over);\n                    _ -&gt;\n                        noop\n                end, \n\n                game_db:write(PlayerRace #player_race &#123;\n                    race_times &#x3D; PlayerRace #player_race.race_times + 1, \n                    last_time  &#x3D; lib_misc:get_local_timestamp()\n                &#125;);\n            true -&gt;\n                clear_race_data(RaceId, ZoneId, RaceStep), \n                init_race_opponent(RaceId, ZoneId, RaceStep), \n\n                game_db:write(PlayerRace #player_race &#123;\n                    race_step  &#x3D; RaceStep, \n                    race_times &#x3D; 1, \n                    last_time  &#x3D; lib_misc:get_local_timestamp(), \n                    win_times  &#x3D; WinTimes\n                &#125;)\n        end, \n\n        lists:foreach(\n            fun(Group) -&gt;\n                lists:foreach(\n                    fun(Index) -&gt;\n                        RaceMemberA &#x3D; try_get_player_race_member(RaceId, ZoneId, RaceStep, Group, Index * 2 - 1), \n                        RaceMemberB &#x3D; try_get_player_race_member(RaceId, ZoneId, RaceStep, Group, Index * 2), \n\n                        if\n                            RaceMemberA &#x3D;:&#x3D; null, RaceMemberB &#x3D;:&#x3D; null -&gt;\n                                noop;\n                            %%轮空为全空或者B为空\n                            % RaceMemberA &#x3D;:&#x3D; null -&gt;\n                            %     game_db:write(#player_race_member &#123;\n                            %         race_id   &#x3D; RaceId, \n                            %         race_step &#x3D; NextRace, \n                            %         group     &#x3D; Group, \n                            %         index     &#x3D; Index, \n                            %         player_id &#x3D; RaceMemberB #player_race_member.player_id\n                            %     &#125;);\n                            RaceMemberB &#x3D;:&#x3D; null -&gt;\n                                TeamIdA  &#x3D; RaceMemberA #player_race_member.player_id, \n\n                                case check_opponent_over(RaceId, ZoneId, RaceStep, TeamIdA) of\n                                    true -&gt;\n                                        noop;\n                                    _ -&gt;\n                                        Opponent &#x3D; try_get_player_race_opponent(RaceId, ZoneId, RaceStep, TeamIdA), \n\n                                        game_db:write(Opponent #player_race_opponent &#123;\n                                            winner_id &#x3D; TeamIdA\n                                        &#125;), \n\n                                        game_db:write(#player_race_member &#123;\n                                            race_id   &#x3D; RaceId,\n                                            zone_id   &#x3D; ZoneId, \n                                            race_step &#x3D; NextRace, \n                                            group     &#x3D; Group, \n                                            index     &#x3D; Index, \n                                            player_id &#x3D; TeamIdA\n                                        &#125;), \n\n                                        race_call(RaceId, race_win, [TeamIdA, Group, RaceStep, NextRace])\n                                end;\n                            true -&gt;\n                                TeamIdA &#x3D; RaceMemberA #player_race_member.player_id, \n                                TeamIdB &#x3D; RaceMemberB #player_race_member.player_id, \n\n                                case check_opponent_over(RaceId, ZoneId, RaceStep, TeamIdA) of\n                                    true -&gt;\n                                        noop;\n                                    _ -&gt;\n                                        case race_fight(RaceId, ZoneId, RaceStep, TeamIdA, TeamIdB) of\n                                            0 -&gt;\n                                                noop;\n                                            WinnerId -&gt;\n                                                case check_opponent_over(RaceId, ZoneId, RaceStep, TeamIdA, TeamIdB) of\n                                                    true -&gt;\n                                                        Opponent &#x3D; try_get_player_race_opponent(RaceId, ZoneId, RaceStep, TeamIdA), \n\n                                                        game_db:write(Opponent #player_race_opponent &#123;\n                                                            winner_id &#x3D; WinnerId\n                                                        &#125;), \n\n                                                        game_db:write(#player_race_member &#123;\n                                                            race_id   &#x3D; RaceId,\n                                                            zone_id   &#x3D; ZoneId, \n                                                            race_step &#x3D; NextRace, \n                                                            group     &#x3D; Group, \n                                                            index     &#x3D; Index, \n                                                            player_id &#x3D; WinnerId\n                                                        &#125;), \n\n                                                        race_call(RaceId, race_win, [WinnerId, Group, RaceStep, NextRace]);\n                                                    _ -&gt;\n                                                        noop\n                                                end\n                                        end\n                                end\n                        end\n                    end, \n                    lists:seq(1, MatchNum)\n                )\n            end, \n            get_all_race_group()\n        ), \n\n        IsOver &#x3D; check_race_over(RaceId, ZoneId, RaceStep), \n\n        if\n            IsOver &#x3D;:&#x3D; true -&gt;\n                NowPlayerRace &#x3D; get_player_race(RaceId, ZoneId), \n\n                game_db:write(NowPlayerRace #player_race &#123;\n                    race_step  &#x3D; NextStep, \n                    race_times &#x3D; 0, \n                    last_time  &#x3D; lib_misc:get_local_timestamp()\n                &#125;);\n            true -&gt;\n                noop\n        end, \n\n        IsOver\n    end, \n\n    &#123;atomic, Result&#125; &#x3D; game_db:do(Tran), \n    Result.</code></pre>\n\n<p>第五步 出晋级赛战报</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">% 播报战报及通知\ndeal_receive_beisai_data(RaceStep,IsOver) -&gt;\n    Tran &#x3D; fun() -&gt;\n        % write_race_data(RaceReportList,RaceResultList,MemberList,OpponentList, WorldWarList),\n        if  \n            IsOver &#x3D;:&#x3D; true -&gt;\n                #race_step &#123;\n                    next_step &#x3D; NextStep\n                &#125; &#x3D; mod_race:get_race_step(RaceStep),\n                % return_bet(RaceStep),\n                if\n                    RaceStep &#x3D;:&#x3D; ?RS_RACE_1 -&gt;\n                        % give_award(),给予奖励\n                        ZoneId &#x3D; 0,\n                        case mod_race:try_get_player_race_member(?RACE_SERVER_WAR, ZoneId, ?RS_RACE_1_OVER, ?RG_TIAN_BANG, 1) of\n                            null -&gt;\n                                noop;\n                            Member -&gt;\n                                ServerId   &#x3D; mod_player:get_player_data(Member #player_race_member.player_id,server_id),\n                                ServerName &#x3D; mod_server:get_server_name(ServerId),\n                                NickName   &#x3D; mod_player:get_player_data(Member #player_race_member.player_id,nickname),\n                                api_chat:centre_screen_message_notify(\n                                    ?MEST_XIAN_DAO_HUI_GUAN_JUN, \n                                    [&#123;ServerName&#125;,&#123;NickName&#125;]\n                                )\n                        end;\n                    true -&gt;\n                        noop\n                end,\n                mod_server:set_player_server_int_data(?SDT_SERVER_WAR_RACE_STEP, NextStep), \n                mod_server:set_player_server_int_data(?SDT_SERVER_WAR_RACE_TIMES, 0),\n                mod_timer:close(1,?TIMER_XIAN_DAO_HUI_BEI_SAI);\n            true -&gt;\n                noop\n        end\n    end,\n    game_db:do(Tran).\n    % api_server_war:notify_new_report().</code></pre>","text":"争霸赛赛程范例3月1日 0：00~3月3日 12:00 报名 40级以上手动报名3月3日 13：00 淘汰赛 “13:00取数据，提前1小时向玩家发送邮件提醒13:10开始出战报，每隔5分钟出1场战报天榜负5局进入地榜，地榜负5局则被淘汰”3月4日 14:00 16强赛（32进1...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"17 mins."},"categories":[{"name":"设计方法","slug":"设计方法","count":5,"path":"api/categories/设计方法.json"}],"tags":[{"name":"游戏","slug":"游戏","count":8,"path":"api/tags/游戏.json"}],"toc":"","author":{"name":"Fly","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个在夏天会被芒果砸到的城市靠写代码为生的前职业电竞选手","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Redis笔记","uid":"cf4d6c3460b72521408e1365a505bd53","slug":"redis笔记","date":"2019-08-01T08:52:31.000Z","updated":"2021-11-30T09:05:53.076Z","comments":true,"path":"api/articles/redis笔记.json","keywords":"node.js blogs IT 互联网 服务端 游戏 mysql redis","cover":null,"text":" Redis是什么、特点、优势redis是Key-Value数据库,数据包含各种数据 字符串String、字典Hash、列表List、集合Set、有序集合SortedSet等redis支持数据持久化，重启再次加载,支持数据备份(支持分布式),Redis是单进程单线程的Redis的...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"IT笔记","slug":"IT笔记","count":21,"path":"api/categories/IT笔记.json"}],"tags":[{"name":"redis","slug":"redis","count":2,"path":"api/tags/redis.json"}],"author":{"name":"Fly","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个在夏天会被芒果砸到的城市靠写代码为生的前职业电竞选手","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Erlang List模块函数使用大全","uid":"dfb30fc03fd62385d2aef0d277edc760","slug":"Erlang List模块函数使用大全","date":"2019-05-07T11:49:16.000Z","updated":"2021-11-30T09:04:30.114Z","comments":true,"path":"api/articles/Erlang List模块函数使用大全.json","keywords":"node.js blogs IT 互联网 服务端 游戏 mysql redis","cover":null,"text":"Erlang List模块函数使用大全 一，带函数Pred1, all(Pred, List) -&gt; boolean()如果List中的每个元素作为Pred函数的参数执行，结果都返回true，那么all函数返回true，否则返回false 例子： lists:all(fun...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"IT笔记","slug":"IT笔记","count":21,"path":"api/categories/IT笔记.json"}],"tags":[{"name":"Erlang","slug":"Erlang","count":2,"path":"api/tags/Erlang.json"}],"author":{"name":"Fly","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个在夏天会被芒果砸到的城市靠写代码为生的前职业电竞选手","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}