{"title":"游戏成就任务系统设计","uid":"a327ba097d8097f094e2ffa26497e116","slug":"游戏成就任务系统设计","date":"2020-06-29T01:07:21.000Z","updated":"2021-11-30T09:07:18.828Z","comments":true,"path":"api/articles/游戏成就任务系统设计.json","keywords":"node.js blogs IT 互联网 服务端 游戏 mysql redis","cover":null,"content":"<p>游戏中的成就任务一般是伴随着玩家操作，及一些游戏次数记录<br>所以可以用一个监听如node里面的</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">var EventEmitter &#x3D; require(&#39;events&#39;).EventEmitter;\nvar life &#x3D; new EventEmitter();\n\n&#x2F;&#x2F;这里不用on，也可以用addEventListener\nlife.on(&#39;doSth&#39;, function(who)&#123;\n　　console.log(&#39;给 &#39; + who + &#39; 倒水&#39;);\n&#125;)\n\nlife.emit(&#39;doSth&#39;,&#39;Sunny&#39;);</code></pre>\n<p>EventEmitter相当于一个观察者模式，事件发布订阅的形式<br>注册监听的请求回发数据，对应的请求去对应执行相应的成就改变<br>请求的类型可以存放在map中，如</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#123;&quot;server.game.inter&quot;:[...class],&quot;server.game.interAct&quot;:[...class]&#125;</code></pre>\n<p>对应请求的列表取出后的对其中类的回调依次执行在返回类似的map</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#123;&quot;1&quot;:&#123;“up”:1&#125;,&quot;2&quot;:&#123;“up”:1&#125;&#125;</code></pre>\n<p>在更新任务返回给客户端显示</p>\n<p>成就任务中需要获得物品的可以定义一个基类  类属性<br>self.idlist = list;list可以为传参进来的物品列表，该列表是需要我们监听的物品改变<br>一般返回给客户端需要物品及数量，可以在返回的里面判断增加多少</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">let up &#x3D; 0;&#x2F;&#x2F;单一物品\nfor(k in returnData.gain)&#123;\n\tif(self.idlist.indexOf(k) &gt; -1)&#123;\n\t\tup+&#x3D; returnData.gain[k];\n\t&#125;\n&#125;\nreturn up;</code></pre>\n","feature":true,"text":"游戏中的成就任务一般是伴随着玩家操作，及一些游戏次数记录所以可以用一个监听如node里面的 var EventEmitter &#x3D; require(&#39;events&#39;).EventEmitter; var life &#x3D; new EventEmitt...","link":"","photos":[],"count_time":{"symbolsCount":907,"symbolsTime":"1 mins."},"categories":[{"name":"设计方法","slug":"设计方法","count":5,"path":"api/categories/设计方法.json"}],"tags":[{"name":"游戏","slug":"游戏","count":8,"path":"api/tags/游戏.json"}],"toc":"","author":{"name":"Fly","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个在夏天会被芒果砸到的城市靠写代码为生的前职业电竞选手","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Mysql的一些不常用的规则","uid":"6607396c684bdaf6e6783930fc77d6ef","slug":"mysql的一些不常用的规则","date":"2021-11-24T08:59:23.000Z","updated":"2021-11-30T09:05:00.544Z","comments":true,"path":"api/articles/mysql的一些不常用的规则.json","keywords":"node.js blogs IT 互联网 服务端 游戏 mysql redis","cover":null,"text":"mysql的全文索引主要用在用户搜索查询，达人秀中应用是用来匹配作品内容及标题全文搜索 传统的匹配方式是like “%xxx%”但这样效率是很低的，在mysql 5.7版本之后提供了inodb的全文索引方式，用的是分词的形式 达人秀中用户主要用的是中文查找内容，但是在标题和内容中...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"IT笔记","slug":"IT笔记","count":21,"path":"api/categories/IT笔记.json"}],"tags":[{"name":"mysql","slug":"mysql","count":3,"path":"api/tags/mysql.json"}],"author":{"name":"Fly","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个在夏天会被芒果砸到的城市靠写代码为生的前职业电竞选手","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"作品合集-多对多对多关系表","uid":"f93992fa9cfdd90a84e68e7ac1ad2636","slug":"作品合集-多对多对多关系表","date":"2021-07-27T07:38:58.000Z","updated":"2021-11-30T09:01:12.663Z","comments":true,"path":"api/articles/作品合集-多对多对多关系表.json","keywords":"node.js blogs IT 互联网 服务端 游戏 mysql redis","cover":[],"text":"作品合集的背景是在原有话题上加入标签，让话题和标签有多对多的关系即 A-&gt;B，新的合集表C是由标签B合并成合集也是多对多关系即 B-&gt;C, 同时对于用户来说，用户只关心对应的话题，对应话题条件加入合集即 A-&gt;C,传统的多对多关系一般是建立中间关联表用作中转的关...","link":"","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[{"name":"IT笔记","slug":"IT笔记","count":21,"path":"api/categories/IT笔记.json"}],"tags":[{"name":"mysql","slug":"mysql","count":3,"path":"api/tags/mysql.json"}],"author":{"name":"Fly","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个在夏天会被芒果砸到的城市靠写代码为生的前职业电竞选手","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}